{"cells": [{"cell_type": "markdown", "metadata": {}, "source": "# Task 3: Train the logistic regression model"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "# Load data saved by Task1 (or recreate by importing Task1 notebook)\nimport numpy as np, torch\nfrom torch.utils.data import TensorDataset, DataLoader\nif os.path.exists(\"X_train.npy\"):\n    X_train = np.load(\"X_train.npy\"); X_test = np.load(\"X_test.npy\")\n    y_train = np.load(\"y_train.npy\"); y_test = np.load(\"y_test.npy\")\nelse:\n    raise FileNotFoundError(\"Run Task1 first or ensure X_train.npy is present.\")"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "# Convert to tensors\nX_train_t = torch.tensor(X_train, dtype=torch.float32); X_test_t = torch.tensor(X_test, dtype=torch.float32)\ny_train_t = torch.tensor(y_train, dtype=torch.float32).view(-1,1); y_test_t = torch.tensor(y_test, dtype=torch.float32).view(-1,1)\n\nfrom Task2_Logistic_Regression import LogisticRegressionModel  # if running as module; else redefine\n# If import fails (running standalone), define again\ntry:\n    Model = LogisticRegressionModel\nexcept Exception:\n    import torch.nn as nn\n    class LogisticRegressionModel(nn.Module):\n        def __init__(self, input_dim):\n            super().__init__(); self.linear = nn.Linear(input_dim,1)\n        def forward(self,x): return torch.sigmoid(self.linear(x))\n    Model = LogisticRegressionModel\n\nmodel = Model(X_train_t.shape[1])\ncriterion = torch.nn.BCELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\ndataset = TensorDataset(X_train_t, y_train_t)\nloader = DataLoader(dataset, batch_size=32, shuffle=True)\n\n# Training loop\nfor epoch in range(1, 51):\n    model.train(); running_loss = 0.0\n    for xb, yb in loader:\n        optimizer.zero_grad()\n        out = model(xb)\n        loss = criterion(out, yb)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()*xb.size(0)\n    epoch_loss = running_loss / len(loader.dataset)\n    if epoch % 10 == 0 or epoch==1:\n        with torch.no_grad():\n            train_acc = (model(X_train_t)>=0.5).float().eq(y_train_t).float().mean().item()\n            test_acc = (model(X_test_t)>=0.5).float().eq(y_test_t).float().mean().item()\n        print(f\"Epoch {epoch:3d} Loss {epoch_loss:.4f} TrainAcc {train_acc:.3f} TestAcc {test_acc:.3f}\")"}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}}, "nbformat": 4, "nbformat_minor": 5}