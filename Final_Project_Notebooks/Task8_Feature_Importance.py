{"cells": [{"cell_type": "markdown", "metadata": {}, "source": "# Task 8: Feature importance from linear layer weights"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "import numpy as np, pandas as pd, torch\nif not os.path.exists(\"X_train.npy\"): raise FileNotFoundError(\"Run Task1 first.\")\nX_train = np.load(\"X_train.npy\"); X_test = np.load(\"X_test.npy\")\ny_train = np.load(\"y_train.npy\"); y_test = np.load(\"y_test.npy\")\ndf = pd.read_csv(\"LeagueofLegends.csv\")"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "# Train a simple logistic model and extract weights\nimport torch.nn as nn, torch.optim as optim\nX_train_t = torch.tensor(X_train, dtype=torch.float32); y_train_t = torch.tensor(y_train, dtype=torch.float32).view(-1,1)\nmodel = nn.Sequential(nn.Linear(X_train_t.shape[1],1), nn.Sigmoid())\nopt = optim.SGD(model.parameters(), lr=0.01)\nloader = torch.utils.data.DataLoader(torch.utils.data.TensorDataset(X_train_t, y_train_t), batch_size=32, shuffle=True)\nfor epoch in range(20):\n    for xb, yb in loader:\n        opt.zero_grad(); out = model(xb); loss = nn.BCELoss()(out, yb); loss.backward(); opt.step()\n\nweights = model[0].weight.detach().numpy().ravel()\nfeature_names = df.drop(columns=['blueWins']).columns.tolist() if 'blueWins' in df.columns else [f'feat_{i}' for i in range(len(weights))]\nimport pandas as pd\nfi = pd.DataFrame({'feature': feature_names, 'weight': weights})\nfi['importance'] = fi['weight'].abs(); fi = fi.sort_values('importance', ascending=False)\nprint(fi.head(20))\nfi.to_csv('feature_importance.csv', index=False)"}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}}, "nbformat": 4, "nbformat_minor": 5}