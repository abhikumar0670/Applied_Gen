{"cells": [{"cell_type": "markdown", "metadata": {}, "source": "# Task 2: Implement a logistic regression model using PyTorch"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "import torch, torch.nn as nn\nclass LogisticRegressionModel(nn.Module):\n    def __init__(self, input_dim):\n        super().__init__()\n        self.linear = nn.Linear(input_dim, 1)\n    def forward(self, x):\n        return torch.sigmoid(self.linear(x))"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "# Demonstrate instantiation using feature size from saved numpy if available\nimport os, numpy as np\nif os.path.exists(\"X_train.npy\"):\n    X_train = np.load(\"X_train.npy\")\n    input_dim = X_train.shape[1]\nelse:\n    input_dim = 10\nmodel = LogisticRegressionModel(input_dim)\nprint(model)"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "# Loss and optimizer\nimport torch.optim as optim\ncriterion = nn.BCELoss()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\nprint(\"Criterion:\", criterion)\nprint(\"Optimizer:\", optimizer)"}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}}, "nbformat": 4, "nbformat_minor": 5}