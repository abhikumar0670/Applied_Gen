{"cells": [{"cell_type": "markdown", "metadata": {}, "source": "# Task 5: Visualize model performance (confusion matrix, classification report, ROC)"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "import numpy as np, torch\nif not os.path.exists(\"X_test.npy\"): raise FileNotFoundError(\"Run Task1 first.\")\nX_test = np.load(\"X_test.npy\"); y_test = np.load(\"y_test.npy\")\nX_test_t = torch.tensor(X_test, dtype=torch.float32)\ny_true = y_test"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "# We'll train a quick model if none exists and evaluate\nimport torch.nn as nn, torch.optim as optim\nclass LogisticRegressionModel(nn.Module):\n    def __init__(self, input_dim):\n        super().__init__(); self.linear = nn.Linear(input_dim,1)\n    def forward(self,x): return torch.sigmoid(self.linear(x))\n\nmodel = LogisticRegressionModel(X_test_t.shape[1])\nopt = optim.SGD(model.parameters(), lr=0.01)\n# quick train on small epochs just to have a model\nif os.path.exists(\"X_train.npy\"):\n    X_train = np.load(\"X_train.npy\"); y_train = np.load(\"y_train.npy\")\n    X_train_t = torch.tensor(X_train, dtype=torch.float32); y_train_t = torch.tensor(y_train, dtype=torch.float32).view(-1,1)\n    loader = torch.utils.data.DataLoader(torch.utils.data.TensorDataset(X_train_t, y_train_t), batch_size=32, shuffle=True)\n    for epoch in range(10):\n        for xb, yb in loader:\n            opt.zero_grad(); out = model(xb); loss = nn.BCELoss()(out, yb); loss.backward(); opt.step()"}, {"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": "from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc\nimport matplotlib.pyplot as plt\nprobs = model(X_test_t).detach().numpy().ravel()\npreds = (probs>=0.5).astype(int)\ncm = confusion_matrix(y_true, preds)\nprint(\"Confusion Matrix:\\n\", cm)\nprint(\"\\nClassification Report:\\n\", classification_report(y_true, preds, digits=4))\n\nfpr, tpr, _ = roc_curve(y_true, probs)\nroc_auc = auc(fpr, tpr)\nprint(\"\\nAUC:\", roc_auc)\n\nplt.figure(figsize=(10,4))\nplt.subplot(1,2,1)\nplt.imshow(cm, cmap='Blues'); plt.title('Confusion Matrix'); plt.colorbar()\nplt.subplot(1,2,2)\nplt.plot(fpr, tpr, label=f\"AUC={roc_auc:.3f}\"); plt.plot([0,1],[0,1],'--'); plt.title('ROC'); plt.legend()\nplt.tight_layout(); plt.show()"}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}}, "nbformat": 4, "nbformat_minor": 5}